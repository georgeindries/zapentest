import { Table, Tag } from "antd";
import axios from "axios";
import React, { useCallback, useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useParams } from "react-router-dom";
import classes from "./ScanAlerts.module.css";

const ScanAlerts = () => {
  const token = useSelector((state) => state.auth.token);
  const [isLoading, setLoading] = useState(false);
  const [scanAlerts, setScanAlerts] = useState();
  const { id } = useParams();

  const risksColors = {
    Low: "#007bff",
    Medium: "#ffc107",
    High: "#dc3545",
    Informational: "#17a2b8",
  };

  const columns = [
    {
      title: "URL",
      dataIndex: "url",
    },
    {
      title: "RISK",
      dataIndex: "risk",
      render: (_, { risk }) => (
        <Tag color={risksColors[risk]} key={risk}>
          {risk.toUpperCase()}
        </Tag>
      ),
    },
    {
      title: "METHOD",
      dataIndex: "method",
    },
    {
      title: "NAME",
      dataIndex: "name",
    },
  ];

  const [currentPage, setCurrentPage] = useState(1);
  const [totalItems, setTotalItems] = useState(0);
  const limit = 10;

  const fetchScanAlerts = useCallback(() => {
    setLoading(true);
    axios
      .get(
        `http://localhost:5000/scan/${id}/alerts?page=${currentPage}&limit=${limit}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      )
      .then((resObj) => {
        setLoading(false);
        const data = resObj.data.alerts;
        const size = resObj.data.size;
        const alerts = data.map((alert, index) => {
          return {
            key: index,
            url: alert.url,
            risk: alert.risk,
            method: alert.method,
            name: alert.name,
            description: alert.description,
            solution: alert.solution,
          };
        });
        setTotalItems(size);
        setScanAlerts(alerts);
      })
      .catch((errObj) => {
        setLoading(false);
        console.log(errObj);
      });
  }, [token, currentPage, limit, id]);

  useEffect(() => {
    fetchScanAlerts();
  }, [fetchScanAlerts]);

  const onPageChange = (page, c) => {
    setCurrentPage(page);
  };

  return (
    <div>
      <div className="tableTitle">Scan Vulnerabilities</div>
      <div className={classes.alerts}>
        <Table
          className="customTable"
          columns={columns}
          dataSource={scanAlerts}
          loading={isLoading}
          pagination={{
            pageSize: limit,
            total: totalItems,
            current: currentPage,
            onChange: onPageChange,
          }}
          expandable={{
            expandedRowRender: (alert) => (
              <div>
                <h4 style={{ fontWeight: 700 }}>DESCRIPTION</h4>
                <p>{alert.description}</p>
                <h4 style={{ marginTop: 20, fontWeight: 700 }}>SOLUTION</h4>
                <p>{alert.solution}</p>
              </div>
            ),
            rowExpandable: (record) => record.name !== "Not Expandable",
          }}
        />
      </div>
    </div>
  );
};

export default ScanAlerts;
