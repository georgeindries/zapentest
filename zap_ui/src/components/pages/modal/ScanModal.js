import React, { useState } from "react";
import {
  Button,
  Checkbox,
  Form,
  Input,
  InputNumber,
  Modal,
  Popover,
  Radio,
} from "antd";
import { InfoCircleOutlined, LoadingOutlined } from "@ant-design/icons";
import {
  useInput,
  useInputCheckBox,
  useInputNumber,
} from "../../../hooks/use-inputs";

import classes from "./ScanModal.module.css";

const SpiderModal = (props) => {
  const title = props.title;
  const isVisible = props.isVisible;
  const loading = props.loading;

  const { value: url, valueChangeHandler: urlChangeHandler } = useInput();
  const { value: maxChildren, valueChangeHandler: maxChildrenChangeHandler } =
    useInputNumber("");
  const { value: recurse, valueChangeHandler: recurseChangeHandler } =
    useInputCheckBox(0);
  const { value: subtreeOnly, valueChangeHandler: subtreeOnlyChangeHandler } =
    useInputCheckBox(false);
  const spiderScan = "SPIDER_SCAN";
  const activeScan = "ACTIVE_SCAN";
  const [scanType, setScanType] = useState(activeScan);

  const handleSubmit = () => {
    props.handleSubmit(url, maxChildren, recurse, subtreeOnly, scanType);
  };

  const handleChangeScanType = (e) => {
    setScanType(e.target.value);
  };

  const urlInfoContent = (
    <div className={classes.infoContent}>
      This parameter represents the site's url you want to spider.
    </div>
  );

  const maxChildrenInfoContent = (
    <div className={classes.infoContent}>
      This parameter limits the number of children that will be crawled at every
      node in the tree. This is useful for data driven applications that have
      large numbers of ‘pages’ that are in fact exactly the same code but
      containing different data, for example from a database. By default this is
      set to zero which means there are no limits applied to the number of child
      nodes crawled.
    </div>
  );

  const recurseInfoContent = (
    <div className={classes.infoContent}>
      This parameter can be used to prevent the spider from seeding recursively.
    </div>
  );

  const subtreeOnlyInfoContent = (
    <div className={classes.infoContent}>
      This parameter allows to restrict the spider under a site's subtree (using
      the specified 'URL').
    </div>
  );

  return (
    <Modal
      visible={isVisible}
      title={<div className={classes.titleModal}>{title}</div>}
      onOk={handleSubmit}
      onCancel={props.handleCloseModal}
      bodyStyle={{
        height: 250,
        paddingTop: 0,
        paddingLeft: 12,
        paddingRight: 12,
        paddingBottom: 0,
      }}
      footer={[
        <div className={classes.actions} key="footer">
          <Button
            key="cancel"
            onClick={props.handleCloseModal}
            className={classes.cancel}
          >
            Cancel
          </Button>
          <Button
            key="submit"
            type="primary"
            loading={loading}
            onClick={handleSubmit}
          >
            Submit
          </Button>
        </div>,
      ]}
    >
      <Form
        name="scan-modal"
        onFinish={handleSubmit}
        autoComplete="off"
        className={classes.form}
        style={{ margin: 0 }}
      >
        <div className={classes.scanTypes}>
          <Radio.Group
            defaultValue={scanType}
            size="medium"
            onChange={handleChangeScanType}
          >
            <Radio.Button value={spiderScan}>SPIDER SCAN</Radio.Button>
            <Radio.Button value={activeScan}>ACTIVE SCAN</Radio.Button>
          </Radio.Group>
        </div>
        <div className={classes.control}>
          <label>
            Site url
            <span className={classes.infoIcon}>
              <Popover content={urlInfoContent}>
                <InfoCircleOutlined />
              </Popover>
            </span>
          </label>
          <Form.Item
            name="url"
            rules={[
              {
                required: true,
                type: "url",
                message: "Please enter a valid url!",
              },
            ]}
          >
            <Input placeholder="Enter your url" onChange={urlChangeHandler} />
          </Form.Item>
        </div>

        {loading && (
          <div>
            <LoadingOutlined style={{ fontSize: 30 }} />
          </div>
        )}

        <div className={`${classes.control} ${classes.controlContainer}`}>
          <div>
            <label>
              Max children
              <span className={classes.infoIcon}>
                <Popover content={maxChildrenInfoContent}>
                  <InfoCircleOutlined />
                </Popover>
              </span>
            </label>
            <Form.Item
              rules={[
                {
                  required: true,
                  type: "number",
                  message: "Please enter a number between 0 and 30!",
                  max: 30,
                },
              ]}
            >
              <InputNumber
                min="0"
                max="30"
                onChange={maxChildrenChangeHandler}
              />
            </Form.Item>
          </div>
          <div>
            <label>
              Recurse
              <span className={classes.infoIcon}>
                <Popover content={recurseInfoContent}>
                  <InfoCircleOutlined />
                </Popover>
              </span>
            </label>
            <Form.Item>
              <Checkbox onChange={recurseChangeHandler} />
            </Form.Item>
          </div>
          <div>
            <label>
              Subtree only
              <span className={classes.infoIcon}>
                <Popover content={subtreeOnlyInfoContent}>
                  <InfoCircleOutlined />
                </Popover>
              </span>
            </label>
            <Form.Item>
              <Checkbox onChange={subtreeOnlyChangeHandler} />
            </Form.Item>
          </div>
        </div>
      </Form>
    </Modal>
  );
};

export default SpiderModal;
