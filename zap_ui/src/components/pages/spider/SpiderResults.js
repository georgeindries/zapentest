import { Table } from "antd";
import axios from "axios";
import React, { useCallback, useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useParams } from "react-router-dom";
import classes from "./SpiderResults.module.css";

const SpiderResults = () => {
  const token = useSelector((state) => state.auth.token);
  const [isLoading, setLoading] = useState(false);
  const [spiderResults, setSpiderResults] = useState();
  const { id } = useParams();

  const columns = [
    {
      title: "URL",
      dataIndex: "url",
    },
    {
      title: "PROCESSED",
      dataIndex: "processed",
    },
    {
      title: "STATUS CODE",
      dataIndex: "statusCode",
    },
    {
      title: "METHOD",
      dataIndex: "method",
    },
  ];

  const [currentPage, setCurrentPage] = useState(1);
  const [totalItems, setTotalItems] = useState(0);
  const limit = 10;

  const fetchSpiderResults = useCallback(() => {
    setLoading(true);
    axios
      .get(
        `http://localhost:5000/spider/${id}/results?page=${currentPage}&limit=${limit}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      )
      .then((resObj) => {
        setLoading(false);
        const data = resObj.data.spiders;
        const size = resObj.data.size;
        const results = data.map((result, index) => {
          return {
            key: index,
            url: result.url,
            processed: result.processed.toString(),
            statusCode: result.statusCode,
            method: result.method,
          };
        });
        setTotalItems(size);
        setSpiderResults(results);
      })
      .catch((errObj) => {
        setLoading(false);
        console.log(errObj);
      });
  }, [token, currentPage, limit, id]);

  useEffect(() => {
    fetchSpiderResults();
  }, [fetchSpiderResults]);

  const onPageChange = (page, c) => {
    setCurrentPage(page);
  };

  return (
    <div>
      <div className="tableTitle">Spider Results</div>
      <div className={classes.results}>
        <Table
          className="customTable"
          columns={columns}
          dataSource={spiderResults}
          loading={isLoading}
          pagination={{
            pageSize: limit,
            total: totalItems,
            current: currentPage,
            onChange: onPageChange,
          }}
        />
      </div>
    </div>
  );
};

export default SpiderResults;
