import { Table, Progress } from "antd";
import { EyeOutlined, LoadingOutlined } from "@ant-design/icons";
import React, { useCallback, useEffect, useState } from "react";
import classes from "./Spider.module.css";
import axios from "axios";
import { useSelector } from "react-redux";
import { NavLink } from "react-router-dom";

const Spider = () => {
  const token = useSelector((state) => state.auth.token);
  const [isLoading, setLoading] = useState(false);
  const [spiderRequests, setSpiderRequests] = useState();

  const columns = [
    {
      title: "URL",
      dataIndex: "url",
    },
    {
      title: "DATE",
      dataIndex: "date",
    },
    {
      title: "STATUS",
      dataIndex: "status",
      render: (_, { status }) => (
        <div>
          {status.toUpperCase() === "IN PROGRESS" && (
            <LoadingOutlined
              style={{ fontSize: 24 }}
              spin
              title={"IN PROGRESS"}
            />
          )}
          {status.toUpperCase() === "FAILED" && (
            <Progress
              type="circle"
              percent={0}
              width={22}
              status="exception"
              title={"FAILED"}
            />
          )}
          {status.toUpperCase() === "DONE" && (
            <Progress type="circle" percent={100} width={22} title={"DONE"} />
          )}
        </div>
      ),
    },
    {
      title: "VIEW",
      dataIndex: "view",
      render: (link) => {
        return (
          <div>
            <NavLink to={link}>
              <EyeOutlined style={{ marginRight: 5 }} />
              Results
            </NavLink>
          </div>
        );
      },
    },
  ];

  const [currentPage, setCurrentPage] = useState(1);
  const [totalItems, setTotalItems] = useState(0);
  const limit = 10;

  const fetchSpiderRequests = useCallback(() => {
    setLoading(true);
    axios
      .get(
        `http://localhost:5000/spider/requests?page=${currentPage}&limit=${limit}`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      )
      .then((resObj) => {
        setLoading(false);
        const data = resObj.data.spiders;
        const size = resObj.data.size;
        const spiders = data.map((spider, index) => {
          const id = spider.id;
          return {
            key: index,
            id: spider.id,
            url: spider.url,
            maxChildren: spider.maxChildren,
            recurse: spider.recurse.toString(),
            subtreeOnly: spider.subtreeOnly.toString(),
            date: new Date(spider.date).toLocaleString(),
            status: spider.status,
            view: `spider/${id}/results`,
          };
        });
        setTotalItems(size);
        setSpiderRequests(spiders);
      })
      .catch((errObj) => {
        setLoading(false);
        console.log(errObj);
      });
  }, [token, currentPage, limit]);

  useEffect(() => {
    fetchSpiderRequests();
  }, [fetchSpiderRequests]);

  const onPageChange = (page, c) => {
    setCurrentPage(page);
  };

  return (
    <div>
      <div className="tableTitle">Spider Scan Requests</div>
      <div className={classes.requests}>
        <Table
          className="customTable"
          columns={columns}
          dataSource={spiderRequests}
          loading={isLoading}
          pagination={{
            pageSize: limit,
            total: totalItems,
            current: currentPage,
            onChange: onPageChange,
          }}
          expandable={{
            expandedRowRender: (scanRequest) => (
              <div>
                <h4 style={{ fontWeight: 700 }}>
                  MAX CHILDREN:{" "}
                  <span style={{ fontWeight: 100 }}>
                    {scanRequest.maxChildren}
                  </span>
                </h4>
                <h4 style={{ marginTop: 20, fontWeight: 700 }}>
                  RECURSE:{" "}
                  <span style={{ fontWeight: 100 }}>
                    {scanRequest.recurse.toUpperCase()}
                  </span>
                </h4>
                <h4 style={{ marginTop: 20, fontWeight: 700 }}>
                  SUBTREE ONLY:{" "}
                  <span style={{ fontWeight: 100 }}>
                    {scanRequest.subtreeOnly.toUpperCase()}
                  </span>
                </h4>
              </div>
            ),
            rowExpandable: (record) => record.name !== "Not Expandable",
          }}
        />
      </div>
    </div>
  );
};

export default Spider;
