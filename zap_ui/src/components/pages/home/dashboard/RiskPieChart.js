import React, { useEffect, useState } from "react";
import * as d3 from "d3";
import d3Tip from "d3-tip";

const nullToZero = (value) => {
  return 0 ? value === null || value === undefined : value;
};

const RiskPieChart = (props) => {
  const data = props.data;
  const elem = "#alerts-risks-pie-chart";
  const colorLow = "#007bff";
  const colorMedium = "#ffc107";
  const colorInfo = "#17a2b8";
  const colorHigh = "#dc3545";

  const [alertsRisks, setAlertsRisks] = useState({
    low: 0,
    medium: 0,
    high: 0,
    info: 0,
  });

  let slices = null;

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const drawPieChart = () => {
    d3.select(elem).select("svg").remove();
    let dataset = [];
    const colorsPalette = {
      low: colorLow,
      medium: colorMedium,
      info: colorInfo,
      high: colorHigh,
    };

    const keys = Object.keys(data);
    const values = Object.values(data);
    const valuesSum = values.reduce((total, val) => total + val);
    let percentages = [];

    for (let idx = 0; idx < values.length; idx += 1) {
      const percentage = ((values[idx] / valuesSum) * 100).toFixed(2);
      percentages.push(percentage);
    }

    for (let idx = 0; idx < keys.length; idx += 1) {
      dataset.push({
        name: keys[idx],
        val: values[idx],
        percentage: percentages[idx],
        color: colorsPalette[keys[idx]],
      });
    }

    setAlertsRisks({
      low: nullToZero(dataset[0].val),
      medium: nullToZero(dataset[1].val),
      high: nullToZero(dataset[2].val),
      info: nullToZero(dataset[3].val),
    });

    if (
      nullToZero(dataset[0].val) === 0 &&
      nullToZero(dataset[1].val) === 0 &&
      nullToZero(dataset[2].val) === 0 &&
      nullToZero(dataset[3].val) === 0
    ) {
      dataset = [];
      for (let i = 0; i < keys.length; i += 1) {
        dataset.push({
          name: keys[i],
          val: 10,
          color: "#d7d7d7",
        });
      }
    }

    const width = parseInt(d3.select(elem).style("width"), 10);
    const height = parseInt(d3.select(elem).style("height"), 10);
    const radius = 0.28 * Math.min(width, height);

    const pieValue = d3.pie().value((d) => d.val);
    d3.pie().value((d) => d.name);
    const arc = d3
      .arc()
      .outerRadius(radius + 10)
      .innerRadius(radius);
    const arcHover = d3
      .arc()
      .outerRadius(radius + 12)
      .innerRadius(radius - 2);

    d3.select(elem)
      .append("svg")
      .attr("width", width)
      .attr("height", height)
      .append("g")
      .attr("transform", `translate(${width / 2},${height / 1.8})`)
      .selectAll("path")
      .data(pieValue(dataset))
      .enter()
      .append("g")
      .attr("class", "slice");

    const tip = d3Tip()
      .attr("class", "d3-tip")
      .offset([50, 50])
      .html(
        (d) =>
          `<div style='background-color:rgba(255, 255, 255, 0.5)'><div style='margin-bottom: -12px'><span>${d.name}: <b>${d.percentage}%</b></span>`
      );

    slices = d3
      .selectAll("g.slice")
      .call(tip)
      .append("path")
      .attr("fill", (d, i) => dataset[i].color)
      .attr("d", arc)
      .on("mouseover", function (d, event) {
        d3.select(d.toElement).attr("d", arcHover);
        tip.show(d.srcElement.__data__.data, this);
      })
      .on("mouseout", function (d, event) {
        d3.select(d.fromElement).attr("d", arc);
        tip.hide(this);
      });
    slices
      .append("text")
      .attr("font-family", "mf-font-light")
      .attr("color", "black")
      .text((d, i) => {
        return dataset[i].name;
      });
  };

  useEffect(() => {
    if (slices == null) {
      drawPieChart();
    }
    const handleResize = () => {
      drawPieChart();
    };
    window.addEventListener("resize", handleResize);
    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, [props.data]);

  return (
    <div id="alerts-risks-container" className="card">
      <div id="inner-div-chart">
        <div id="alerts-risks-pie-legend">
          <span className="chart-title">Vulnerabilities rate</span>
          <ul id="alerts-risks-list">
            <li id="alert-risk-low">Low: {alertsRisks["low"]}</li>
            <li id="alert-risk-medium">Medium: {alertsRisks["medium"]}</li>
            <li id="alert-risk-high">High: {alertsRisks["high"]}</li>
            <li id="alert-risk-info">Info: {alertsRisks["info"]}</li>
          </ul>
        </div>
        <div id="alerts-risks-pie-chart"></div>
      </div>
    </div>
  );
};

export default RiskPieChart;
