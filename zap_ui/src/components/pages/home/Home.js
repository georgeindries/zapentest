import { Button } from "antd";
import axios from "axios";
import React, { useCallback, useEffect, useState } from "react";
import { useSelector } from "react-redux";
import ScanModal from "../modal/ScanModal";
import classes from "./Home.module.css";
import RiskPieChart from "../home/dashboard/RiskPieChart";
import AlertsTopChart from "../home/dashboard/AlertsTopChart";
import UserActivity from "./dashboard/UserActivity";
import UserSites from "./dashboard/UserSites";
import TokenModal from "../modal/TokenModal";

const alertsRiskColors = {
  Low: "#007bff",
  Medium: "#ffc107",
  High: "#dc3545",
  Informational: "#17a2b8",
};

const mapAlerts = (alerts) => {
  const all = alerts.map((alert) => [
    alert.name,
    +alert.frequency,
    alertsRiskColors[alert.risk],
    `${alert.name}\nFrequency:${alert.frequency}\nRisk:${alert.risk}`,
  ]);
  all.unshift([
    "Alert",
    "Frequency",
    { role: "style" },
    { role: "tooltip", type: "string", p: { html: true } },
  ]);
  return all;
};

const Home = () => {
  const token = useSelector((state) => state.auth.token);
  const [isModalVisible, setModalVisible] = useState(false);
  const [isCopyModalVisible, setCopyModalVisible] = useState(false);
  const [isLoading, setLoading] = useState(false);
  const titleModal = "Create Scan Request";
  const titleTokenModal = "JWT token";
  const [alertsRisks, setAlertsRisks] = useState({
    low: 0,
    medium: 0,
    high: 0,
    info: 0,
  });
  const [alertsTop, setAlertsTop] = useState([
    [
      "Alert",
      "Frequency",
      { role: "style" },
      { role: "tooltip", type: "string", p: { html: true } },
    ],
  ]);
  const [lastMonthActivity, setLastMonthActivity] = useState([
    ["x", "Spider scans", "Active scans"],
  ]);
  const [jwtToken, setJwtToken] = useState("");

  const handleOpenModal = () => {
    setModalVisible(true);
  };

  const handleCloseModal = () => {
    setModalVisible(false);
  };

  const sendScanRequest = (
    url,
    maxChildren,
    recurse,
    subtreeOnly,
    scanType
  ) => {
    setLoading(true);
    let requestUrl;
    if (scanType === "SPIDER_SCAN") {
      requestUrl = "http://localhost:5000/spider";
    } else if (scanType === "ACTIVE_SCAN") {
      requestUrl = "http://localhost:5000/scan";
    }
    axios
      .post(
        requestUrl,
        {
          url,
          maxChildren,
          recurse,
          subtreeOnly,
        },
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      )
      .then((resObj) => {
        setLoading(false);
        setModalVisible(false);
      })
      .catch((errObj) => {
        console.log(errObj);
        setLoading(false);
      });
  };

  const fetchTopAlerts = useCallback(() => {
    const requestUrl = `http://localhost:5000/statistics/top-alerts`;
    axios
      .get(requestUrl, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
      .then((resObj) => {
        const data = resObj.data.alerts;
        const alertsList = data.map((alert, index) => {
          return {
            key: index,
            name: alert.name,
            risk: alert.risk,
            frequency: alert.frequency,
          };
        });
        setAlertsTop(mapAlerts(alertsList));
      })
      .catch((errObj) => {
        setLoading(false);
        console.log(errObj);
      });
  }, [token]);

  const fetchAlertsRisks = useCallback(() => {
    const requestUrl = `http://localhost:5000/statistics/alerts-risks`;
    axios
      .get(requestUrl, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
      .then((resObj) => {
        const data = resObj.data.risks;
        const risks = {
          low: 0,
          medium: 0,
          high: 0,
          info: 0,
        };
        for (let idx = 0; idx < data.length; idx += 1) {
          if (data[idx].risk === "Informational") {
            risks.info = +data[idx].frequency;
          } else if (data[idx].risk === "Low") {
            risks.low = +data[idx].frequency;
          } else if (data[idx].risk === "Medium") {
            risks.medium = +data[idx].frequency;
          } else if (data[idx].risk === "High") {
            risks.high = +data[idx].frequency;
          }
        }
        setAlertsRisks(risks);
      })
      .catch((errObj) => {
        setLoading(false);
        console.log(errObj);
      });
  }, [token]);

  const fetchUserLastMonthActivity = useCallback(() => {
    const requestUrl = `http://localhost:5000/statistics/last-month-activity`;
    axios
      .get(requestUrl, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
      .then((resObj) => {
        const data = resObj.data.lastMonthActivity;
        setLastMonthActivity(data);
      })
      .catch((errObj) => {
        setLoading(false);
        console.log(errObj);
      });
  }, [token]);

  const fetchToken = () => {
    const requestUrl = `http://localhost:5000/auth/token`;
    axios
      .get(requestUrl, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })
      .then((resObj) => {
        const jwt = resObj.data.token;
        setJwtToken(jwt);
        setCopyModalVisible(true);
      })
      .catch((errObj) => {
        setLoading(false);
        console.log(errObj);
      });
  };

  const handleCopyToken = () => {
    console.log(jwtToken);
    setModalVisible(false);
  };

  const handleCloseTokenModal = () => {
    setCopyModalVisible(false);
  };

  const handleGenerateToken = () => {
    fetchToken();
  };

  useEffect(() => {
    fetchTopAlerts();
  }, [fetchTopAlerts]);

  useEffect(() => {
    fetchAlertsRisks();
  }, [fetchAlertsRisks]);

  useEffect(() => {
    fetchUserLastMonthActivity();
  }, [fetchUserLastMonthActivity]);

  return (
    <div>
      <div className={classes.scan}>
        <div className={`${classes.scanItem} dashboard-title`}>
          Your sites overview
        </div>
        <div className={classes.scanItem}>
          <Button type="primary" onClick={handleOpenModal}>
            Scan URL
          </Button>
        </div>
        <div className={classes.scanItem}>
          <Button type="primary" onClick={handleGenerateToken}>
            Generate JWT
          </Button>
        </div>
      </div>
      <div className="dashboard-container">
        <AlertsTopChart data={alertsTop} />
        <RiskPieChart data={alertsRisks} />
      </div>
      <div className="dashboard-container">
        <UserActivity data={lastMonthActivity} />
        <UserSites />
      </div>

      {isModalVisible && (
        <ScanModal
          title={titleModal}
          isVisible={isModalVisible}
          loading={isLoading}
          handleCloseModal={handleCloseModal}
          handleSubmit={sendScanRequest}
        />
      )}

      {isCopyModalVisible && (
        <TokenModal
          title={titleTokenModal}
          isVisible={isCopyModalVisible}
          jwtToken={jwtToken}
          handleCloseTokenModal={handleCloseTokenModal}
          handleCopyToken={handleCopyToken}
        />
      )}
    </div>
  );
};

export default Home;
