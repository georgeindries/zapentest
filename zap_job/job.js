const dotenv = require('dotenv');
const express = require('express');
const morgan = require('morgan');
const cors = require('cors');
const { executeSpiderRequests } = require('./services/spider/spidering');
const { executeScanRequests } = require('./services/scan/scanning');

dotenv.config({ path: './config/config.env' });

const app = express();

app.use(express.json());

if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'));
}

app.use(cors());

const PORT = process.env.PORT || 4000;

const server = app.listen(PORT, async () => {
  console.log('Scanning Job started...');
  const time = 30 * 1000;
  setInterval(async () => {
    await executeSpiderRequests();
  }, time);
  setInterval(async () => {
    await executeScanRequests();
  }, 2 * time + 10000);
});

const callBackUnhandled = (error, promise) => {
  console.log(`Error ${error.message}`);
  server.close(() => {
    console.log('Server stoped!');
    process.exit(1);
  });
};

process.on('unhandledRejection', callBackUnhandled);
