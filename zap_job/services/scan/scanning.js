const { getZapClient } = require('../client/zaproxy-client');
const { getContextByName, createContext, includeUrlInContext } = require('../context/context');
const { saveScanAlert, getOldestScanRequestByStatus, updateScanRequestStatus } = require('../../database/queries/scan');
const { checkAllSpiderRequestsAreDoneOrFailed } = require('../../database/queries/spider');
const { createNewSession } = require('../session/session');
const { sleep } = require('../../utils/utils');

const activeScan = async (contextName) => {
  const zaproxy = getZapClient();
  let contextId = -1;
  await getContextByName(contextName)
    .then((context) => {
      contextId = context.id;
    })
    .catch((err) => {
      throw err;
    });
  return zaproxy.ascan.scan(null, null, null, null, null, null, contextId)
    .then((scanId) => scanId)
    .catch((err) => {
      throw err;
    });
};

const getScanStatusByZapId = (scanId) => {
  const zaproxy = getZapClient();
  return zaproxy.ascan.status(scanId)
    .then((res) => res)
    .catch((err) => {
      throw err;
    });
};

const getScanAlertsZap = (url) => {
  const zaproxy = getZapClient();
  return zaproxy.core.alerts(url)
    .then((res) => res)
    .catch((err) => {
      throw err;
    });
};

const storeScanAlerts = async (scanAlerts, scanRequestId) => {
  for (let idx = 0; idx < scanAlerts.length; idx += 1) {
    const scanAlert = scanAlerts[idx];
    await saveScanAlert(
      scanRequestId,
      scanAlert.url,
      scanAlert.risk,
      scanAlert.method,
      scanAlert.description,
      scanAlert.name,
      scanAlert.solution,
      scanAlert.alert,
    );
  }
};

const spiderScan = (url, contextName, maxChildren, recurse, subTreeOnly) => {
  const zaproxy = getZapClient();
  return zaproxy.spider.scan(url, maxChildren, recurse, contextName, subTreeOnly)
    .then((res) => res)
    .catch((err) => {
      throw err;
    });
};

const getSpiderStatusByZapId = (scanId) => {
  const zaproxy = getZapClient();
  return zaproxy.spider.status(scanId)
    .then((res) => res)
    .catch((err) => {
      throw err;
    });
};

const stopActiveScan = (scanId) => {
  const zaproxy = getZapClient();
  return zaproxy.ascan.stop(scanId)
    .then((res) => res)
    .catch((err) => {
      throw err;
    });
};

exports.executeScanRequests = async () => {
  let scanRequest = null;
  let success = true;

  const statusNew = 'NEW';
  const statusFailed = 'FAILED';
  const statusInProgress = 'IN_PROGRESS';
  const statusDone = 'DONE';

  let cont = true;
  await checkAllSpiderRequestsAreDoneOrFailed()
    .then((resObj) => {
      cont = resObj;
    })
    .catch((errObj) => {
      success = false;
      console.log(errObj);
    });

  if (!cont || !success) return;

  await getOldestScanRequestByStatus(statusInProgress)
    .then((resObj) => {
      scanRequest = resObj;
    })
    .catch((errObj) => {
      success = false;
      console.log(errObj);
    });

  if ((scanRequest !== null && scanRequest !== undefined) || !success) return;

  await getOldestScanRequestByStatus(statusNew)
    .then((resObj) => {
      scanRequest = resObj;
    })
    .catch((errObj) => {
      success = false;
      console.log(errObj);
    });

  if (scanRequest === null || scanRequest === undefined || !success) return;

  const {
    id,
    context,
    url,
    maxChildren,
    recurse,
    subtreeOnly,
  } = scanRequest;

  if (success) {
    await updateScanRequestStatus(id, statusInProgress)
      .catch((errObj) => {
        success = false;
        console.log(`Error at updateScanRequestStatus(): ${errObj}`);
      });
  }

  if (success === true) {
    await createNewSession(context)
      .catch((errObj) => {
        success = false;
        console.log(`Error at createNewSession(): ${errObj.error.message}`);
      });
  }

  if (success === true) {
    await createContext(context)
      .catch((errObj) => {
        success = false;
        console.log(`Error at createContext(): ${errObj.error.message}`);
      });
  }

  if (success === true) {
    await includeUrlInContext(context, url)
      .catch((errObj) => {
        success = false;
        console.log(`Error at includeUrlInContext(): ${errObj.error.message}`);
      });
  }

  let spiderIdZap;
  if (success === true) {
    await spiderScan(url, context, maxChildren, recurse, subtreeOnly)
      .then((resObj) => {
        spiderIdZap = resObj.scan;
      })
      .catch((errObj) => {
        success = false;
        console.log(`Error at spiderScan(): ${errObj.error.message}`);
      });
  }

  if (success) {
    let spiderStatus = 0;
    const wait = 3000;
    while (spiderStatus < 100 && success === true) {
      await getSpiderStatusByZapId(spiderIdZap)
        .then((resObj) => {
          spiderStatus = resObj.status;
        })
        .catch((errObj) => {
          success = false;
          console.log(`Error at getSpiderStatusByZapId(): ${errObj.error.message}`);
        });
      await sleep(wait);
    }
  }

  let scanIdZap;
  if (success) {
    await activeScan(context)
      .then((resObj) => {
        scanIdZap = resObj.scan;
      })
      .catch((errObj) => {
        success = false;
        console.log(`Error at activeScan(): ${errObj.error.message}`);
      });
  }

  if (success) {
    let scanStatus = 0;
    let seconds = 0;
    const wait = 5000;
    while (scanStatus < 100 && success === true) {
      await getScanStatusByZapId(scanIdZap) // spiderIdZap?
        .then((resObj) => {
          scanStatus = resObj.status;
        })
        .catch((errObj) => {
          success = false;
          console.log(`Error at getScanStatusByZapId(): ${errObj.error.message}`);
        });
      if (seconds === 1 * 60 * 1000) {
        await stopActiveScan(scanIdZap)
          .catch((errObj) => {
            success = false;
            console.log(`Error at stopActiveScan(): ${errObj.error.message}`);
          });
        break;
      }
      seconds += wait;
      await sleep(wait);
    }
  }

  let scanAlerts;
  if (success) {
    await getScanAlertsZap(url)
      .then((res) => {
        scanAlerts = res.alerts;
      })
      .catch((errObj) => {
        success = false;
        console.log(`Error at getScanAlertsZap(): ${errObj.error.message}`);
      });
  }

  if (success) {
    await storeScanAlerts(scanAlerts, id)
      .catch((errObj) => {
        success = false;
        console.log(`Error at storeScanAlerts(): ${errObj}`);
      });
  }

  if (success) {
    await updateScanRequestStatus(id, statusDone)
      .catch((errObj) => {
        console.log(`Error at updateScanRequestStatus(): ${errObj}`);
      });
  }

  if (!success) {
    await updateScanRequestStatus(id, statusFailed)
      .catch((errObj) => {
        console.log(`Error at updateScanRequestStatus(): ${errObj}`);
      });
  }
};
