const { getPgClient } = require('../connection/connect');

exports.saveSpiderResult = async (
  spiderRequestId,
  url,
  processed,
  statusReason,
  method,
  reasonNotProcessed,
  statusCode,
) => {
  const client = getPgClient();
  const query = {
    name: 'save-spider-result',
    text: 'INSERT INTO spider_results(spider_request_id, url, processed, status_reason, method, reason_not_processed, status_code) VALUES ($1, $2, $3, $4, $5, $6, $7)',
    values: [spiderRequestId, url, processed, statusReason, method, reasonNotProcessed, statusCode],
  };
  await client.connect();
  return client
    .query(query)
    .then((res) => res)
    .catch((err) => {
      throw err;
    })
    .finally(async () => {
      await client.end();
    });
};

exports.updateSpiderRequestStatus = async (id, status) => {
  const client = getPgClient();
  const query = {
    name: 'update-spider-request-status',
    text: 'UPDATE spider_requests SET status = $1 WHERE id = $2',
    values: [status, id],
  };
  await client.connect();
  return client
    .query(query)
    .then((res) => res)
    .catch((err) => {
      throw err;
    })
    .finally(async () => {
      await client.end();
    });
};

exports.getOldestSpiderRequestByStatus = async (status) => {
  const client = getPgClient();
  const query = {
    name: 'fetch-oldest-spider-request-by-status',
    text: 'SELECT * FROM spider_requests WHERE status = $1 ORDER BY date ASC',
    values: [status],
  };
  await client.connect();
  return client
    .query(query)
    .then((res) => {
      const spiderRequest = res.rows[0];
      if (res.rows.length === 0) {
        return null;
      }
      return {
        id: spiderRequest.id,
        context: spiderRequest.context,
        url: spiderRequest.url,
        maxChildren: spiderRequest.max_children,
        recurse: spiderRequest.recurse,
        subtreeOnly: spiderRequest.subtree_only,
        date: spiderRequest.date,
        userEmail: spiderRequest.user_email,
        status: spiderRequest.status,
      };
    })
    .catch((err) => {
      throw err;
    })
    .finally(async () => {
      await client.end();
    });
};

exports.checkAllSpiderRequestsAreDoneOrFailed = async () => {
  const client = getPgClient();
  const query = {
    name: 'check-no-spider-request-with-statuses',
    text: 'SELECT 1 FROM spider_requests WHERE status <> $1 AND status <> $2',
    values: ['FAILED', 'DONE'],
  };
  await client.connect();
  return client
    .query(query)
    .then((res) => ((res.rows.length === 0)))
    .catch((err) => {
      throw err;
    })
    .finally(async () => {
      await client.end();
    });
};
