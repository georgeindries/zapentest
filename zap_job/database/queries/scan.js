const { getPgClient } = require('../connection/connect');

exports.saveScanAlert = async (
  scanRequestId,
  url,
  risk,
  method,
  description,
  name,
  solution,
  alert,
) => {
  const client = getPgClient();
  const query = {
    name: 'save-scan-alert',
    text: 'INSERT INTO scan_alerts(scan_request_id, url, risk, method, description, name, solution, alert) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)',
    values: [scanRequestId, url, risk, method, description, name, solution, alert],
  };
  await client.connect();
  return client
    .query(query)
    .then((res) => res)
    .catch((err) => {
      throw err;
    })
    .finally(async () => {
      await client.end();
    });
};

exports.updateScanRequestStatus = async (id, status) => {
  const client = getPgClient();
  const query = {
    name: 'update-scan-request-status',
    text: 'UPDATE scan_requests SET status = $1 WHERE id = $2',
    values: [status, id],
  };
  await client.connect();
  return client
    .query(query)
    .then((res) => res)
    .catch((err) => {
      throw err;
    })
    .finally(async () => {
      await client.end();
    });
};

exports.getOldestScanRequestByStatus = async (status) => {
  const client = getPgClient();
  const query = {
    name: 'fetch-oldest-scan-request-by-status',
    text: 'SELECT * FROM scan_requests WHERE status = $1 ORDER BY date ASC',
    values: [status],
  };
  await client.connect();
  return client
    .query(query)
    .then((res) => {
      const scanRequest = res.rows[0];
      if (res.rows.length === 0) {
        return null;
      }
      return {
        id: scanRequest.id,
        context: scanRequest.context,
        url: scanRequest.url,
        maxChildren: scanRequest.max_children,
        recurse: scanRequest.recurse,
        subtreeOnly: scanRequest.subtree_only,
        date: scanRequest.date,
        userEmail: scanRequest.user_email,
        status: scanRequest.status,
      };
    })
    .catch((err) => {
      throw err;
    })
    .finally(async () => {
      await client.end();
    });
};
