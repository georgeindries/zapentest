const {
  saveScanRequest,
  getUserScanRequestsCount,
  getUserScanRequestsByLimitAndOffset,
  getUserSites,
  getUserScanRequestsByLimitOffsetAndUrl,
  getUserScanRequestsByUrlCount,
  getUserScanAlertsByLimitAndOffset,
  getUserScanAlertsCount,
} = require('../../database/queries/scan');

exports.storeScanRequest = (
  context,
  url,
  maxChildren,
  recurse,
  subtreeOnly,
  date,
  userEmail,
  status,
) => saveScanRequest(
  context,
  url,
  maxChildren,
  recurse,
  subtreeOnly,
  date,
  userEmail,
  status,
)
  .then((resObj) => resObj)
  .catch((err) => {
    throw err;
  });

exports.getUserScanRequestsByPageAndLimit = async (page, limit, userEmail) => {
  const offset = (page - 1) * limit;
  return getUserScanRequestsByLimitAndOffset(limit, offset, userEmail)
    .then((resObj) => {
      const scanRequests = resObj.map((scanRequest) => ({
        id: scanRequest.id,
        url: scanRequest.url,
        maxChildren: scanRequest.max_children,
        recurse: scanRequest.recurse,
        subtreeOnly: scanRequest.subtree_only,
        date: scanRequest.date,
        status: scanRequest.status,
      }));
      return scanRequests;
    })
    .catch((err) => {
      throw err;
    });
};

exports.getUserScanRequestsSize = async (userEmail) => getUserScanRequestsCount(userEmail)
  .then((resObj) => resObj)
  .catch((err) => {
    throw err;
  });

exports.getUserScanRequestsByPageLimitAndUrl = async (page, limit, url, userEmail) => {
  const offset = (page - 1) * limit;
  return getUserScanRequestsByLimitOffsetAndUrl(limit, offset, url, userEmail)
    .then((resObj) => {
      const scanRequests = resObj.map((scanRequest) => ({
        id: scanRequest.id,
        url: scanRequest.url,
        maxChildren: scanRequest.max_children,
        recurse: scanRequest.recurse,
        subtreeOnly: scanRequest.subtree_only,
        date: scanRequest.date,
        status: scanRequest.status,
      }));
      return scanRequests;
    })
    .catch((err) => {
      throw err;
    });
};

exports.getUserScanRequestsByUrlSize = async (userEmail, url) => getUserScanRequestsByUrlCount(
  userEmail,
  url,
)
  .then((resObj) => resObj)
  .catch((err) => {
    throw err;
  });

exports.getUserSites = async (userEmail) => getUserSites(userEmail)
  .then((resObj) => {
    const sites = resObj.map((site) => ({
      url: site.url,
      numberOfRequests: site.number_of_requests,
    }));
    return sites;
  })
  .catch((err) => {
    throw err;
  });

exports.getUserScanAlertsByLimitAndOffset = async (userEmail, page, limit, scanRequestId) => {
  const offset = (page - 1) * limit;
  return getUserScanAlertsByLimitAndOffset(userEmail, limit, offset, scanRequestId)
    .then((resObj) => {
      const scanAlerts = resObj.map((scanAlert) => ({
        url: scanAlert.url,
        risk: scanAlert.risk,
        method: scanAlert.method,
        description: scanAlert.description,
        name: scanAlert.name,
        solution: scanAlert.solution,
        alert: scanAlert.alert,
      }));
      return scanAlerts;
    })
    .catch((err) => {
      throw err;
    });
};

exports.getUserScanAlertsSize = async (userEmail, scanRequestId) => getUserScanAlertsCount(
  userEmail,
  scanRequestId,
)
  .then((resObj) => resObj)
  .catch((err) => {
    throw err;
  });
