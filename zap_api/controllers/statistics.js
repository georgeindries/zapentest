const jwt = require('jsonwebtoken');
const { getUserLastMonthScanRequests, getUserLastMonthSpiderRequests } = require('../database/queries/statistics');
const asyncHandler = require('../middleware/async');
const { getUserMostFrequentAlerts, getUserAlertsRisksFrequency } = require('../services/statistics');
const ErrorResponse = require('../utils/error-response');
const { formatDate, extractDateFromTimeStamp } = require('../utils/utils');

// @desc Get request for user most frequent alerts
// @route GET statistics/top-alerts
// @access private
exports.getUserMostFrequentAlerts = asyncHandler(async (req, res, next) => {
  const [_, token] = req.headers.authorization.split(' ');
  const decodedToken = jwt.verify(token, process.env.JWT_SECRET);
  const userEmail = decodedToken.id;
  let errorMessage = '';
  const errorCode = 500;
  let alerts = [];
  const oldestDate = new Date();
  oldestDate.setMonth(oldestDate.getMonth() - 1);

  await getUserMostFrequentAlerts(userEmail, oldestDate)
    .then((resObj) => {
      alerts = resObj;
    })
    .catch((errObj) => {
      errorMessage += errObj;
    });

  if (errorMessage !== undefined && errorMessage !== '') {
    return next(
      new ErrorResponse(
        errorMessage,
        errorCode,
      ),
    );
  }

  res.status(200).json({
    success: true,
    alerts,
  });
});

// @desc Get request for user most frequent alerts
// @route GET statistics/alerts-risks
// @access private
exports.getUserAlertsRisksFrequency = asyncHandler(async (req, res, next) => {
  const [_, token] = req.headers.authorization.split(' ');
  const decodedToken = jwt.verify(token, process.env.JWT_SECRET);
  const userEmail = decodedToken.id;
  let errorMessage = '';
  const errorCode = 500;
  let risks = [];
  const oldestDate = new Date();
  oldestDate.setMonth(oldestDate.getMonth() - 1);

  await getUserAlertsRisksFrequency(userEmail, oldestDate)
    .then((resObj) => {
      risks = resObj;
    })
    .catch((errObj) => {
      errorMessage += errObj;
    });

  if (errorMessage !== undefined && errorMessage !== '') {
    return next(
      new ErrorResponse(
        errorMessage,
        errorCode,
      ),
    );
  }

  res.status(200).json({
    success: true,
    risks,
  });
});

// @desc Get request for user last month scan requests
// @route GET statistics/last-month-activity
// @access private
exports.getUserLastMonthActivity = asyncHandler(async (req, res, next) => {
  const [_, token] = req.headers.authorization.split(' ');
  const decodedToken = jwt.verify(token, process.env.JWT_SECRET);
  const userEmail = decodedToken.id;
  let errorMessage = '';
  const errorCode = 500;
  let lastMonthScanRequests = [];
  let lastMonthSpiderRequests = [];
  const oldestDate = new Date();
  oldestDate.setDate(oldestDate.getDate() - 30);

  await getUserLastMonthScanRequests(userEmail, oldestDate)
    .then((resObj) => {
      lastMonthScanRequests = resObj;
    })
    .catch((errObj) => {
      errorMessage += errObj;
    });

  await getUserLastMonthSpiderRequests(userEmail, oldestDate)
    .then((resObj) => {
      lastMonthSpiderRequests = resObj;
    })
    .catch((errObj) => {
      errorMessage += errObj;
    });

  if (errorMessage !== undefined && errorMessage !== '') {
    return next(
      new ErrorResponse(
        errorMessage,
        errorCode,
      ),
    );
  }

  const lastMonthActivity = [['x', 'Spider scans', 'Active scans']];
  for (let idx = 1; idx <= 30; idx += 1) {
    const sdate = new Date();
    sdate.setDate(sdate.getDate() - 30 + idx);
    const fdate = formatDate(sdate);
    let spRequests = 0;
    let scRequests = 0;
    for (let i = 0; i < lastMonthSpiderRequests.length; i += 1) {
      if (extractDateFromTimeStamp(lastMonthSpiderRequests[i].date) === fdate) {
        spRequests = +lastMonthSpiderRequests[i].count;
      }
    }
    for (let i = 0; i < lastMonthScanRequests.length; i += 1) {
      if (extractDateFromTimeStamp(lastMonthScanRequests[i].date) === fdate) {
        scRequests = +lastMonthScanRequests[i].count;
      }
    }
    lastMonthActivity.push([`${fdate}`, spRequests, scRequests]);
  }

  res.status(200).json({
    success: true,
    lastMonthActivity,
  });
});
