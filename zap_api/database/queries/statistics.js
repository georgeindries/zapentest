const { getPgClient } = require('../connect');

exports.getUserMostFrequentAlerts = async (userEmail, oldestDate) => {
  const client = getPgClient();
  const queryText = 'SELECT sa.name, sa.risk, COUNT(*) AS frequency'
    + ' FROM scan_requests sr'
    + ' INNER JOIN scan_alerts sa ON sr.id=sa.scan_request_id'
    + ' WHERE sr.user_email=$1 AND sr.date>=to_timestamp($2 / 1000.0)'
    + ' GROUP BY sa.name, sa.risk order by frequency desc limit 5';
  const query = {
    name: 'fetch-user-most-frequent-alerts',
    text: queryText,
    values: [userEmail, oldestDate.getTime()],
  };
  await client.connect();
  return client
    .query(query)
    .then((res) => res.rows)
    .catch((err) => {
      throw err;
    })
    .finally(async () => {
      await client.end();
    });
};

exports.getUserAlertsRisksFrequency = async (userEmail, oldestDate) => {
  const client = getPgClient();
  const queryText = 'SELECT res.risk, SUM(res.frequency) AS frequency'
  + ' FROM'
    + ' (SELECT sa.name, sa.risk, COUNT(*) AS frequency'
      + ' FROM scan_requests sr'
      + ' INNER JOIN scan_alerts sa ON sr.id=sa.scan_request_id'
      + ' WHERE sr.user_email=$1 AND sr.date>=to_timestamp($2 / 1000.0)'
      + ' GROUP BY sa.name, sa.risk) res'
  + ' GROUP BY res.risk';
  const query = {
    name: 'fetch-user-risks-frequency',
    text: queryText,
    values: [userEmail, oldestDate.getTime()],
  };
  await client.connect();
  return client
    .query(query)
    .then((res) => res.rows)
    .catch((err) => {
      throw err;
    })
    .finally(async () => {
      await client.end();
    });
};

exports.getUserLastMonthScanRequests = async (userEmail, oldestDate) => {
  const client = getPgClient();
  const queryText = 'SELECT DATE(date), user_email, COUNT(DATE(date)), ROW_NUMBER() OVER (ORDER BY DATE(date)) AS num'
  + ' FROM'
    + ' scan_requests'
    + ' WHERE user_email=$1 '
      + ' GROUP BY DATE(date), user_email';
    // + ' HAVING DATE(date)>=DATE(to_timestamp($2 / 1000.0))';
  const query = {
    name: 'fetch-user-last-month-scan-requests',
    text: queryText,
    values: [userEmail], // , oldestDate.getTime()],
  };
  await client.connect();
  return client
    .query(query)
    .then((res) => res.rows)
    .catch((err) => {
      throw err;
    })
    .finally(async () => {
      await client.end();
    });
};

exports.getUserLastMonthSpiderRequests = async (userEmail, oldestDate) => {
  const client = getPgClient();
  const queryText = 'SELECT DATE(date), user_email, COUNT(DATE(date)), ROW_NUMBER() OVER (ORDER BY DATE(date)) AS num'
  + ' FROM'
    + ' spider_requests'
    + ' WHERE user_email=$1 '
      + ' GROUP BY DATE(date), user_email';
    // + ' HAVING DATE(date)>=DATE(to_timestamp($2 / 1000.0))';
  const query = {
    name: 'fetch-user-last-month-spider-requests',
    text: queryText,
    values: [userEmail], // , oldestDate.getTime()],
  };
  await client.connect();
  return client
    .query(query)
    .then((res) => res.rows)
    .catch((err) => {
      throw err;
    })
    .finally(async () => {
      await client.end();
    });
};
